Bootstrap: docker
From: python:3.9-slim
Stage: devel

%files
    $HOME/Documents/DIADEM/MOFLearning/simple-adsorption-workflow-0.0.3.tar.gz /home/
    $HOME/Documents/DIADEM/MOFLearning/zeo++/zeo++-0.3.tar /opt/zeo/
    $HOME/Documents/DIADEM/MOFLearning/raspa-v2.0.48/RASPA2-2.0.48.tar.gz /opt/raspa/
    
%post
    # Before anything, updates and main packages
    apt-get -y update
    apt-get install -y build-essential libxrender1 libxext6 --no-install-recommends
    # Installing cmake
    apt-get install -y automake libtool --no-install-recommends
    # Installing pip requirements
    cd /home
    tar xzf simple-adsorption-workflow-0.0.3.tar.gz
    rm -rf simple-adsorption-workflow-0.0.3.tar.gz
    mv simple-adsorption-workflow-0.0.3 app
    cd app
    pip install --no-cache-dir -r requirements.txt
    # Openbabel
    pip install --no-cache-dir openbabel-wheel==3.1.1.17
    # RASPA2
    cd /opt/raspa
    tar -xzf RASPA2-2.0.48.tar.gz
    rm -rf RASPA2-2.0.48.tar.gz
    cd RASPA2-2.0.48
    rm -rf autom4te.cache
    mkdir m4
    aclocal
    autoreconf -i
    automake --add-missing
    autoconf
    ./configure --prefix=/opt/raspa/RASPA2-2.0.48
    make
    make install
    python3 setup.py install
    # ZEO++
    # First, build voro++
    cd /opt/zeo
    tar xf zeo++-0.3.tar
    rm -rf zeo++-0.3.tar
    cd /opt/zeo/zeo++-0.3/voro++/src
    make
    # Then build zeo++
    cd /opt/zeo/zeo++-0.3
    make


Bootstrap: docker
From: python:3.9-slim
Stage: final

%files from devel
    /home/app /home/app
    /usr/local /usr/local
    /opt/zeo/zeo++-0.3 /opt/zeo/zeo++-0.3
    /opt/raspa/RASPA2-2.0.48 /opt/raspa/RASPA2-2.0.48


%environment
    export RASPA_PARENT_DIR=/opt/raspa
    export RASPA_DIR=$RASPA_PARENT_DIR/RASPA2-2.0.48
    export DYLD_LIBRARY_PATH=$RASPA_DIR/lib
    export LD_LIBRARY_PATH=$RASPA_DIR/lib
    export ZEO_DIR=/opt/zeo/zeo++-0.3
    export PACKAGE_DIR=/home/app
    export SA_WORKFLOW_COMMIT_HASH="e10fa6257269157b0f037acb554a4f8e41d108bd"

%post
    apt-get -y update
    apt-get install -y build-essential libxrender1 libxext6 --no-install-recommends
    pip install --no-cache-dir -r /home/app/requirements.txt
    pip install --no-cache-dir openbabel-wheel==3.1.1.17

%test
    echo "[STARTING TESTS :] cd $PACKAGE_DIR"
    cd $PACKAGE_DIR
    echo "[NEW TEST :] python $PACKAGE_DIR/example_adsorption_workflow.py run -t -o /tmp/tests1"
    python example_adsorption_workflow.py run -t -o /tmp/tests1
    echo "[NEW TEST :] python $PACKAGE_DIR/example_adsorption_workflow.py run -t2 -o /tmp/tests2"
    python example_adsorption_workflow.py run -t2 -o /tmp/tests2
    echo "[NEW TEST :] python $PACKAGE_DIR/example_adsorption_workflow.py merge -t3 -o /tmp/tests3"
    python example_adsorption_workflow.py merge -t3 -o /tmp/tests3
    echo "[NEW TEST :] python $PACKAGE_DIR/example_adsorption_workflow.py run --test-charges -o /tmp/tests4"
    python example_adsorption_workflow.py run --test-charges -o /tmp/tests4
    echo "[TESTS FINISHED] - cleaning outputs in /tmp"
    rm -rf /tmp/tests*

%runscript
    python /home/app/example_adsorption_workflow.py run
  
%help
    This container image embedds the "simple adsorption workflow", version v0.0.3 ;
    commit hash "e10fa6257269157b0f037acb554a4f8e41d108bd".
    For more information about this image, such as its metadata please run
        "apptainer inspect <this-image>"
    
    This workflow proposes two type of calculations :
    1 - "run",   called as "$PACKAGE_DIR/example_adsorption_workflow.py run"
        which performs actual adsorption simulations and produces isotherms.
    2 - "merge", called as "$PACKAGE_DIR/example_adsorption_workflow.py merge"
        which takes several output (json) files and merges them.

    See https://github.com/coudertlab/simple-adsorption-workflow for mor infomation.

    To call either of these commands in a container with this image through three commands :
        * "apptainer run <this-image>"  which runs the default command of the image inside a container.
        * "apptainer exec <this-image> <command>"   which allows you to specify the command you want
                                                    to run inside the container.
        * "apptainer shell<this-image>" which allows you to enter an interactive shell inside a container.

    If you use "apptainer run <this-image>", the folloing command will be called :
        "python /home/app/example_adsorption_workflow.py run"
    which runs the default calculation of the workflow.
    If you want to specify either the input file or the output file, you can append
        "-i <path/to/myinput>.json" or "-o <path/to/data/directory>"
    to the "apptainer run <this-image>" command.

    If you use "apptainer exec <this-image> <command>", you will execute <command> (whatever it is) inside
    the container. It can be useful for instance if you want to perform a merge operation :
        "apptainer exec <this-image> python /home/app/example_adsorption_workflow.py merge -i run<index1>.json run<index2>.json -o ./"

    You can also enter an interactive shell within the container with "apptainer shell <this-image>".

    Finally, you can also run tests to ensure the image works as intended. Just use
        "apptainer test <this-image>"

    If you wish, data isolation and path bindings are available (as for any Apptainer container).
    Use "--containall" to fully isolate the container from the host machine.
    Use "--bind </path/on/your/machine>:</path/in/the/container>" to manually mount a directory from
    your machine in the container.
    For instance, assuming you want to run a fully-isolated computation with the input "input.json"
    file in "./input" and gather the output in "./output" :
        "apptainer exec --containall --bind $PWD:/tmp <this-image> \
            python /home/app/example_adsorption_workflow.py run -i /tmp/input/input.json -o /tmp/output"

%labels
    Owner Arthur Hardiagon
    Author dylan.bissuel@univ-lyon1.fr
    Version v0.0.3
    Commit_hash e10fa6257269157b0f037acb554a4f8e41d108bd
    MyLabel simple-adsorption-workflow
    EntryPoint https://github.com/coudertlab/simple-adsorption-workflow